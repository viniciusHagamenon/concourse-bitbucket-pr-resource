#!/usr/bin/env bash
# vim: set ft=sh

set -e -o pipefail

exec 3>&1
exec 1>&2

cd "${1}"

payload=$(mktemp /tmp/resource.XXXXXX)
cat > ${payload} <&0

# source
bitbucket_type=`jq -r '.source.bitbucket_type // "server"' < ${payload}`
base_url=`jq -r '.source.base_url // ""' < ${payload}`
username=`jq -r '.source.username // ""' < ${payload}`
password=`jq -r '.source.password // ""' < ${payload}`
project=`jq -r '.source.project // ""' < ${payload}`
repository=`jq -r '.source.repository // ""' < ${payload}`
limit=`jq -r '.source.limit // 100' < ${payload}`
# version
version_updated_at=`jq -r '.version.updated_at // 0' < ${payload}`

if [[ ! ${base_url} ]]; then
    echo "error: source.base_url can't be empty"
    exit 1
fi
if [[ ! ${project} ]]; then
    echo "error: source.project can't be empty"
    exit 1
fi
if [[ ! ${repository} ]]; then
    echo "error: source.repository can't be empty"
    exit 1
fi

# Bitbucket Cloud and (self-hosted) Server APIs are a bit different
if [[ "$bitbucket_type" == "server" ]]; then
    uri="${base_url}/rest/api/1.0/projects/${project}/repos/${repository}/pull-requests?limit=${limit}&state=open"

    curl -s --fail -u ${username}:${password} $uri | jq -r \
        '.values
        | map({
            id: .id | tostring, 
            branch: .fromRef.id | tostring | (capture("refs/heads/(?<branch>.+)").branch // .),
            commit: .fromRef.latestCommit, 
            updated_at: .updatedDate | tostring
        }) 
        | map(select(.updated_at >= '$version_updated_at'))
        | sort_by(.updated_at)' >&3
elif [[ "$bitbucket_type" == "cloud" ]]; then
    uri="${base_url}/api/2.0/repositories/${project}/${repository}/pullrequests?limit=${limit}&state=OPEN"

    # write response to file as feeding it to jq from a variable doesnt work properly: JSON looses linefeed format in variable
    response=$(mktemp /tmp/resource.XXXXXX)
    curl -s --fail -u "${username}:${password}" $uri | jq -r '.values' > "${response}"

    prs="[]"
    while read -r pullrequest; do
        branch=$(echo "$pullrequest" | jq -r '.source.branch.name')
        id=$(echo "$pullrequest" | jq -r '.id')
        commit=$(echo "$pullrequest" | jq -r '.source.commit.hash')
        commit_url=$(echo "$pullrequest" | jq -r '.source.commit.links.self.href')

        # get the commit date, which is when the PR last got updated code-wise.
        # the updated_on field in the PR also changes when comment added etc
        date=$(curl -s --fail -u "${username}:${password}" $commit_url | jq -r '.date')        
        
        prs+="+ [{id:\"$id\", branch: \"$branch\", commit:\"$commit\", updated_at:\"$date\"}]"
    done < <(jq -c '.[]' "${response}")

    # take the list of PRs | sort by update-date of commits | remove the date | pick latest PR, wrap as array for concourse
    jq -n "[ $prs | sort_by(.updated_at) | map(del(.updated_at)) | .[-1] ]" >&3
fi

